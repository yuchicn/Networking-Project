/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chess.gui.component;

import assets.ImageAssets;
import chess.game.Alignment;
import chess.game.ChessPieceType;
import chess.game.Coordinate;
import chess.game.IChessPiece;
import chess.gamelogic.PossibleMove;
import chess.gui.IChessBoardListener;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.LinkedList;
import java.util.List;

/**
 *
 * @author yu-chi
 */
public class ChessBoard extends javax.swing.JPanel {
    
    private IChessPiece movingPiece = IChessPiece.emptyPiece(null);
    private Coordinate movingDestination;
    
    private List<IChessBoardListener> listeners;
    
    private TilePanel[][] tiles = new TilePanel[8][8];
    
    public ChessBoard() {
        this(Alignment.WHITE);
    }
    
    /**
     * Creates new form ChessBoard
     */
    public ChessBoard(Alignment alignment) {
        initComponents();
        this.listeners = new LinkedList<>();
        initializeTiles(alignment);
    }
    
    public void movePiece(Coordinate from, Coordinate to) {
        getTile(from).repaint();
    }
    
    public final void initializeTiles(Alignment orientation) {
        boolean flip = orientation == Alignment.WHITE;
        for (int r = 1; r <= 8; ++r) {
            marginLeft.add(ChessBoardLabel.row(flip ? 9 - r : r));
            marginRight.add(ChessBoardLabel.row(flip ? 9 - r : r));
            for (int c = 1; c <= 8; ++c) {
                Coordinate t = flip ? 
                        new Coordinate(9 - r, c) : new Coordinate(r, 9 - c);
                new TilePanel(t).add();
            }
        }
        for (int c = 1; c <= 8; ++c) {
            marginTop.add(ChessBoardLabel.column(flip ? c : 9 - c));
            marginBottom.add(ChessBoardLabel.column(flip ? c : 9 - c));
        }
    }
    
    public void addBoardListener(IChessBoardListener listener) {
        this.listeners.add(listener);
    }
    
    private TilePanel getTile(Coordinate index) {
        if (index == null)
            return null;
        return tiles[index.column - 1][index.row - 1];
    }
    
    private void setHolding(IChessPiece holding) {
        if (holding == null)
            holding = IChessPiece.emptyPiece(null);
        
        this.movingPiece = holding;
        
        Cursor c;
        if (holding.getType() == ChessPieceType.EMPTY)
            c = Cursor.getDefaultCursor();
        else {
            Toolkit toolkit = Toolkit.getDefaultToolkit();
            Image image = ImageAssets.loadChessPieceIcon(holding.getType());
            Dimension d = toolkit.getBestCursorSize(image.getWidth(this), image.getHeight(this));
            Point hotSpot = new Point(
                    d.width / 2, d.height / 2);
            c = toolkit.createCustomCursor(image, 
                    hotSpot, 
                    "img");
        }
        ChessBoard.this.tilesPanel.setCursor (c);
    }
    
    private ChessPieceType getPieceAt(Coordinate at) {
        ChessPieceType p;
        for (IChessBoardListener l : listeners)
            if ((p = l.getPiece(at)) != null)
                return p;
        return ChessPieceType.EMPTY;
    }
    
    private PossibleMove[] getMoves(Coordinate at) {
        PossibleMove[] m;
        for (IChessBoardListener l : listeners)
            if ((m = l.getMoves(at)) != null)
                return m;
        return new PossibleMove[0];
    }
    
    private void moveAction(Coordinate from, Coordinate to) {
        listeners.forEach(((l) -> l.move(from, to)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        squarePanel = new javax.swing.JPanel();
        tilesPanel = new javax.swing.JPanel();
        marginTop = new javax.swing.JPanel();
        marginLeft = new javax.swing.JPanel();
        marginRight = new javax.swing.JPanel();
        marginBottom = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(11, 11), new java.awt.Dimension(11, 11), new java.awt.Dimension(11, 11));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(11, 11), new java.awt.Dimension(11, 11), new java.awt.Dimension(11, 11));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(11, 11), new java.awt.Dimension(11, 11), new java.awt.Dimension(11, 11));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(11, 11), new java.awt.Dimension(11, 11), new java.awt.Dimension(11, 11));

        setBackground(new java.awt.Color(111, 71, 10));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(300, 300));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        squarePanel.setOpaque(false);
        squarePanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                squarePanelComponentResized(evt);
            }
        });

        tilesPanel.setBackground(new java.awt.Color(195, 173, 141));
        tilesPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tilesPanel.setPreferredSize(new java.awt.Dimension(274, 274));
        tilesPanel.setLayout(new java.awt.GridLayout(8, 8));

        marginTop.setOpaque(false);
        marginTop.setPreferredSize(new java.awt.Dimension(11, 11));
        marginTop.setLayout(new java.awt.GridLayout(1, 8));

        marginLeft.setOpaque(false);
        marginLeft.setPreferredSize(new java.awt.Dimension(11, 11));
        marginLeft.setLayout(new java.awt.GridLayout(8, 0));

        marginRight.setOpaque(false);
        marginRight.setPreferredSize(new java.awt.Dimension(11, 11));
        marginRight.setLayout(new java.awt.GridLayout(8, 0));

        marginBottom.setOpaque(false);
        marginBottom.setPreferredSize(new java.awt.Dimension(11, 11));
        marginBottom.setLayout(new java.awt.GridLayout(0, 8));

        javax.swing.GroupLayout squarePanelLayout = new javax.swing.GroupLayout(squarePanel);
        squarePanel.setLayout(squarePanelLayout);
        squarePanelLayout.setHorizontalGroup(
            squarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(squarePanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(squarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, squarePanelLayout.createSequentialGroup()
                        .addGroup(squarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(marginLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filler4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(squarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(marginTop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tilesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE))
                        .addGroup(squarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(marginRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(squarePanelLayout.createSequentialGroup()
                        .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(marginBottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        squarePanelLayout.setVerticalGroup(
            squarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(squarePanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(squarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(marginTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filler4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(squarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, squarePanelLayout.createSequentialGroup()
                        .addGroup(squarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tilesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(marginLeft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(marginRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(squarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(marginBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(filler1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        add(squarePanel);
    }// </editor-fold>//GEN-END:initComponents

    private void squarePanelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_squarePanelComponentResized
        
    }//GEN-LAST:event_squarePanelComponentResized

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        resizeSquarePanel();
    }//GEN-LAST:event_formComponentResized

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        resizeSquarePanel();
    }//GEN-LAST:event_formComponentShown

    private void resizeSquarePanel() {
        int w = getWidth();
        int h = getHeight();
        int min = Math.min(w, h);
        squarePanel.setPreferredSize(new Dimension(min, min));
        squarePanel.setSize(new Dimension(min, min));
        squarePanel.setMaximumSize(new Dimension(min, min));
        squarePanel.invalidate();
        squarePanel.revalidate();
    }
    
    private class TilePanel extends javax.swing.JPanel {
        
        public final Coordinate index;
        
        public TilePanel(Coordinate index) {
            this.index = index;
            
            this.setName(String.format("tilePanel%s", index));
            this.setBackground(index.getTileColor().asColor());
            this.setName(index.toString());
            
            bindMouseEvents();
            
            tiles[index.column-1][index.row-1] = this;
        }

        @Override
        public void paint(Graphics g) {
            super.paint(g); //To change body of generated methods, choose Tools | Templates.
            ChessPieceType p = getPieceAt(index);
            if (p != ChessPieceType.EMPTY) {
                Image icon = ImageAssets.loadChessPieceIcon(p);
                if (icon != null)
                    g.drawImage(icon, 0, 0, getWidth(), getHeight(), this);
            }
        }
        
        protected void add() {
            tilesPanel.add(this);
        }

        @Override
        public boolean equals(Object obj) {
            return 
                super.equals(obj) ||
                (obj instanceof TilePanel && 
                    ((TilePanel)obj).index.equals(this.index)) ||
                (obj instanceof Coordinate && 
                    ((Coordinate)index).equals(obj));
        }
        
        private void bindMouseEvents() {
            addMouseListener(new MouseListener() {
                
                PossibleMove[] moves;
                
                @Override
                public void mouseClicked(MouseEvent e) {
                    
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    ChessPieceType p = getPieceAt(index);
                    setHolding(IChessPiece.placeholder(p, index));
                    setBackground(index.getTileColor().highlightColor(Color.YELLOW));
                    moves = getMoves(index);
                    for (PossibleMove c : moves) {
                        TilePanel tp = getTile(c);
                        if (tp != null) {
                            Color highlight = c.isBlocked ? Color.RED : Color.BLUE;
                            tp.setBackground(tp.index.getTileColor().highlightColor(highlight));
                        }
                    }
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    System.out.println("released " + movingPiece.getType() + " " + movingPiece.getCoordinate() + " -> " + movingDestination);
                    if (movingPiece.getType() != ChessPieceType.EMPTY && 
                            !index.equals(movingDestination)) {
                        moveAction(movingPiece.getCoordinate(), movingDestination);
                    }
                    setHolding(IChessPiece.emptyPiece(movingDestination));
                    setBackground(index.getTileColor().asColor());
                    for (Coordinate c : moves) {
                        if (c != null) {
                            TilePanel tp = getTile(c);
                            tp.setBackground(tp.index.getTileColor().asColor());
                        }
                    }
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    movingDestination = index;
                    ChessPieceType piece = getPieceAt(index);
                    if (piece != null && piece.type.filename != null) {
                        setToolTipText(piece.type.filename.toUpperCase());
                    }
                }

                @Override
                public void mouseExited(MouseEvent e) {
                }
            }) ;
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.JPanel marginBottom;
    private javax.swing.JPanel marginLeft;
    private javax.swing.JPanel marginRight;
    private javax.swing.JPanel marginTop;
    private javax.swing.JPanel squarePanel;
    private javax.swing.JPanel tilesPanel;
    // End of variables declaration//GEN-END:variables
}
