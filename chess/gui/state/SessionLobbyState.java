/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chess.gui.state;

import chess.game.Alignment;
import chess.gui.GUIAction;
import chess.gui.GUIState;
import chess.gui.IStateController;
import chess.gui.StateProperties;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author yu-chi
 */
public class SessionLobbyState extends GUIState {

    /**
     * Creates new form SessionLobbyState
     */
    public SessionLobbyState(IStateController stateInfo) {
        super(stateInfo);
        initComponents();
    }
    
    private void setAlignment(Alignment color) {
        myAlignmentStatusLabel.setText(String.format("(%s)", color.toString()));
        otherAlignmentStatusLabel.setText(String.format("(%s)", color.other().toString()));
    }
    
    private void evaluateState() {
        boolean iReady = getProperty(StateProperties.MY_READY_STATE, false),
                oReady = getProperty(StateProperties.OTHER_READY_STATE, false);
        if (iReady && oReady)
            controller.gui_startGame();
    }
    
    private void sendChatMessage() {
        controller.gui_sendMessage(chatEntryField.getText());
        chatEntryField.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        switchButton = new javax.swing.JButton();
        readyButton = new javax.swing.JToggleButton();
        playersListPanel = new chess.gui.component.DynamicListPanel("Players");
        leaveButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        myNameLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        otherNameLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        myNameStatusLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        myStatusLabel = new javax.swing.JLabel();
        myAlignmentStatusLabel = new javax.swing.JLabel();
        otherNameStatusLabel = new javax.swing.JLabel();
        otherAlignmentStatusLabel = new javax.swing.JLabel();
        otherStatusLabel = new javax.swing.JLabel();
        chatLogPanel = new chess.gui.component.ChatLogPanel();
        chatEntryField = new chess.gui.component.ChatEntryField();

        switchButton.setText("Switch Colors");
        switchButton.setFocusable(false);
        switchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchButtonActionPerformed(evt);
            }
        });

        readyButton.setText("Toggle Ready");
        readyButton.setFocusable(false);
        readyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readyButtonActionPerformed(evt);
            }
        });

        playersListPanel.setFocusable(false);

        leaveButton.setText("Leave");
        leaveButton.setFocusable(false);
        leaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(playersListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(switchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(readyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(playersListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(switchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(readyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(leaveButton)
                .addGap(12, 12, 12))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        myNameLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        myNameLabel.setText("You");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("vs");

        otherNameLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        otherNameLabel.setText("(waiting)");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("The game will begin when both players are ready");

        myNameStatusLabel.setText("You");

        myStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        myStatusLabel.setText("NOT READY");

        myAlignmentStatusLabel.setText("(WHITE)");

        otherNameStatusLabel.setText("(waiting)");

        otherAlignmentStatusLabel.setText("(BLACK)");

        otherStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        otherStatusLabel.setText("NOT READY");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(myNameLabel)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2)
                        .addGap(3, 3, 3)
                        .addComponent(otherNameLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(otherNameStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(myNameStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(otherAlignmentStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(otherStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(myAlignmentStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(myStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(myNameLabel)
                    .addComponent(jLabel2)
                    .addComponent(otherNameLabel))
                .addGap(0, 0, 0)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(myNameStatusLabel)
                    .addComponent(myStatusLabel)
                    .addComponent(myAlignmentStatusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(otherNameStatusLabel)
                    .addComponent(otherStatusLabel)
                    .addComponent(otherAlignmentStatusLabel))
                .addContainerGap())
        );

        chatEntryField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chatEntryFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chatLogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chatEntryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chatLogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chatEntryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chatEntryFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chatEntryFieldActionPerformed
        //logChatMessage(getProperty(StateProperties.DISPLAY_NAME), chatEntryField.getMessage());
        sendChatMessage();
    }//GEN-LAST:event_chatEntryFieldActionPerformed

    private void switchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchButtonActionPerformed
        Alignment color = getProperty(StateProperties.ALIGNMENT_COLOR);
        color = color.other();
        controller.gui_switchColors(color);
        setProperty(StateProperties.ALIGNMENT_COLOR, color);
    }//GEN-LAST:event_switchButtonActionPerformed

    private void readyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readyButtonActionPerformed
        boolean ready = readyButton.isSelected();
        setProperty(StateProperties.MY_READY_STATE, ready);
    }//GEN-LAST:event_readyButtonActionPerformed

    private void leaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaveButtonActionPerformed
        controller.gui_leaveSession();
    }//GEN-LAST:event_leaveButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private chess.gui.component.ChatEntryField chatEntryField;
    private chess.gui.component.ChatLogPanel chatLogPanel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton leaveButton;
    private javax.swing.JLabel myAlignmentStatusLabel;
    private javax.swing.JLabel myNameLabel;
    private javax.swing.JLabel myNameStatusLabel;
    private javax.swing.JLabel myStatusLabel;
    private javax.swing.JLabel otherAlignmentStatusLabel;
    private javax.swing.JLabel otherNameLabel;
    private javax.swing.JLabel otherNameStatusLabel;
    private javax.swing.JLabel otherStatusLabel;
    private chess.gui.component.DynamicListPanel playersListPanel;
    private javax.swing.JToggleButton readyButton;
    private javax.swing.JButton switchButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void initializeState() {
        //myNameLabel.setText(getProperty(StateProperties.DISPLAY_NAME));
        //otherNameLabel.setText(getProperty(StateProperties.OPPONENT_NAME));
        //setAlignment(getProperty(StateProperties.ALIGNMENT_COLOR));
        Alignment color = getProperty(StateProperties.ALIGNMENT_COLOR);
        if (color != null)
            setAlignment(color);
        playersListPanel.setItems(getProperty(StateProperties.PLAYERS_LIST, new String[0]));
        controller.gui_listPlayers();
        setProperty(StateProperties.MY_READY_STATE, false);
        setProperty(StateProperties.OTHER_READY_STATE, false);
        
        String name = getProperty(StateProperties.DISPLAY_NAME);
        myNameLabel.setText(name);
        myNameStatusLabel.setText(name);
        chatEntryField.setDisplayName(name);
        
        name = getProperty(StateProperties.OPPONENT_NAME);
        otherNameLabel.setText(name);
        otherNameStatusLabel.setText(name);
    }

    @Override
    protected void onPropertyChanged(String propertyName) {
        switch (propertyName) {
            case StateProperties.ALIGNMENT_COLOR: 
                setAlignment(getProperty(propertyName)); 
                break;
            case StateProperties.MY_READY_STATE: {
                boolean status = getProperty(propertyName);
                myStatusLabel.setText(StateProperties.READY_STATE_TEXT(status));
                controller.gui_toggleReady(status);
                readyButton.setSelected(status);
                evaluateState();
                break;
            }
            case StateProperties.OTHER_READY_STATE: {
                boolean status = getProperty(propertyName);
                otherStatusLabel.setText(StateProperties.READY_STATE_TEXT(status));
                evaluateState();
                break;
            }
            case StateProperties.PLAYERS_LIST:
                System.out.println("updating players list");
                playersListPanel.setItems(getProperty(propertyName));
                break;
            case StateProperties.OPPONENT_NAME: {
                String name = getProperty(propertyName);
                if (name == null)
                    name = "(waiting)";
                else if (name.equals("SERVER"))
                    new RuntimeException("opponent is SERVER").printStackTrace();
                otherNameLabel.setText(name);
                otherNameStatusLabel.setText(name);
                break;
            }
        }
    }

    @Override
    public void unloadState() {
    }

    @Override
    public boolean isFlexible() {
        return true;
    }

    @Override
    public void displayError(String message) {
        chatLogPanel.logMessage("*ERROR*", message);
    }

    @Override
    public void clearError(String replaceMessage) {
        
    }

    @Override
    public void chatMessage(String sender, String message) {
        chatLogPanel.logMessage(sender, message);
    }

    @Override
    public void opponentJoined(String name) {
        setProperty(StateProperties.OPPONENT_NAME, name);
        Alignment color = getProperty(StateProperties.ALIGNMENT_COLOR, Alignment.WHITE);
        controller.gui_listPlayers();
        controller.gui_switchColors(color);
        controller.gui_toggleReady(getProperty(StateProperties.MY_READY_STATE, false));
    }

    @Override
    public void switchColor(Alignment color) {
        Alignment myColor = color.other();
        setProperty(StateProperties.ALIGNMENT_COLOR, myColor);
        setAlignment(myColor);
        setProperty(StateProperties.MY_READY_STATE, false);
    }

    @Override
    public void syncNotInGame() {
        GUIState newState = new MainLobbyState(this);
        controller.gui_changeState(newState);
        controller.gui_listPlayers();
    }

    @Override
    public void startGame() {
        controller.gui_changeState(new PlayState(this));
    }

    @Override
    public void opponentLeft() {
        String myName = getProperty(StateProperties.DISPLAY_NAME);
        Logger.getLogger(SessionLobbyState.class.getName()).log(Level.INFO, "Opponent of {0} disconnected", myName);
        setProperty(StateProperties.OPPONENT_NAME, null);
        setProperty(StateProperties.OTHER_READY_STATE, false);
        controller.gui_listPlayers();
    }
    
    @Override
    public void interact(GUIAction action, Object... parameters) {
        switch (action) {
            case CONTINUE:
                if (!readyButton.isSelected()) {
                    readyButton.setSelected(true);
                    readyButtonActionPerformed(null);
                }
                break;
            case TOGGLE:
                readyButton.setSelected(!readyButton.isSelected());
                readyButtonActionPerformed(null);
                break;
            case EXIT:
                interactWith(leaveButton);
                break;
            case ENTER_TEXT:
                verifyParameters(parameters, String.class);
                chatEntryField.setText((String)parameters[0]);
                break;
            case SUBMIT_TEXT:
                chatEntryField.send();
                break;
            case SELECT:
                interactWith(switchButton);
                break;
            default:
                throw new IllegalStateException(getClass().getName() + " does not support " + action);
        }
    }
}
