/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chess.gui.state;

import chess.gui.GUIAction;
import chess.gui.GUIState;
import chess.gui.IStateController;
import chess.gui.StateProperties;
import java.util.regex.Pattern;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author yu-chi
 */
public class RegisterState extends GUIState {
    
    private static final int DISPLAY_NAME_LENGTH = 15;
    private static final Pattern DISPLAY_NAME_REGEX = Pattern.compile(
            String.format("[A-Za-z0-9]{3,%d}", DISPLAY_NAME_LENGTH)); // 3-15 alphanumeric chars
    
    private static final String ERROR_DISPLAY_NAME = 
            "That display name is not allowed";
    
    /**
     * Creates new form RegisterState
     */
    public RegisterState(IStateController stateInfo) {
        super(stateInfo);
        initComponents();
        addNameChangeListener();
    }
    
    private boolean validateDisplayName() {
        boolean isValid = 
                DISPLAY_NAME_REGEX.matcher(nameTextField.getText()).matches();
        if (!isValid)
            displayError(String.format("%s.", ERROR_DISPLAY_NAME));
        else
            clearError(ERROR_DISPLAY_NAME);
        registerButton.setEnabled(isValid);
        return isValid;
    }
    
    private void register() {
        //Logger.getLogger(RegisterState.class.getName()).log(Level.WARNING, "Continuing without registering name to server"); // TODO: validate name availability
        //controller.gui_changeState(new MainLobbyState(this));
        if (validateDisplayName()) {
            controller.gui_reconnect();
            setProperty(StateProperties.DISPLAY_NAME, nameTextField.getText());
            controller.gui_registerClient(nameTextField.getText());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headingLabel = new javax.swing.JLabel();
        displayNameLabelLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        registerButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        errorMessageLabel = new javax.swing.JLabel();
        charCountLabel = new javax.swing.JLabel();
        charCountRatioLabel = new javax.swing.JLabel();
        charCountMaxLabel = new javax.swing.JLabel();
        charCountLabelLabel = new javax.swing.JLabel();
        rulesTextArea = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(360, 269));

        headingLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        headingLabel.setText("Register");

        displayNameLabelLabel.setText("Display Name");

        nameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextFieldActionPerformed(evt);
            }
        });

        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        errorMessageLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorMessageLabel.setText("(ERROR TEXT)");
        errorMessageLabel.setText(" ");

        charCountLabel.setText("0");

        charCountRatioLabel.setText("/");

        charCountMaxLabel.setText("0");
        charCountMaxLabel.setText(Integer.toString(DISPLAY_NAME_LENGTH));

        charCountLabelLabel.setText("chars");

        rulesTextArea.setEditable(false);
        rulesTextArea.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        rulesTextArea.setBorder(null);
        rulesTextArea.setText("•  May only contain alphanumeric characters:\n    •  A-Z\n    •  a-z\n    •  0-9\n• Must contain at least 3 characters\n• May contain no more than 15 characters\n");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Display Name Rules:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(registerButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(displayNameLabelLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(errorMessageLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(rulesTextArea, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameTextField, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(charCountLabel)
                                .addGap(1, 1, 1)
                                .addComponent(charCountRatioLabel)
                                .addGap(1, 1, 1)
                                .addComponent(charCountMaxLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(charCountLabelLabel))
                            .addComponent(jLabel1))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headingLabel)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(displayNameLabelLabel)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(charCountLabel)
                    .addComponent(charCountRatioLabel)
                    .addComponent(charCountMaxLabel)
                    .addComponent(charCountLabelLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addComponent(rulesTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerButton)
                    .addComponent(backButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        controller.gui_changeState(new TitleState(this));
    }//GEN-LAST:event_backButtonActionPerformed

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        if (registerButton.isEnabled())
            register();
    }//GEN-LAST:event_registerButtonActionPerformed

    private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextFieldActionPerformed
        if (registerButton.isEnabled())
            register();
    }//GEN-LAST:event_nameTextFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel charCountLabel;
    private javax.swing.JLabel charCountLabelLabel;
    private javax.swing.JLabel charCountMaxLabel;
    private javax.swing.JLabel charCountRatioLabel;
    private javax.swing.JLabel displayNameLabelLabel;
    private javax.swing.JLabel errorMessageLabel;
    private javax.swing.JLabel headingLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton registerButton;
    private javax.swing.JTextPane rulesTextArea;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void onPropertyChanged(String propertyName) {
        switch (propertyName) {
            case StateProperties.DISPLAY_NAME:
                validateDisplayName(); break;
            default:
                break;
        }
    }

    @Override
    public void unloadState() {
        
    }

    @Override
    public void displayError(String message) {
        errorMessageLabel.setText(message);
    }

    @Override
    public void clearError(String replaceMessage) {
        if (errorMessageLabel.getText().startsWith(replaceMessage))
            errorMessageLabel.setText(" ");
    }
    
    private void addNameChangeListener() {
        DocumentListener displayNameListener = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                onTextChanged();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                onTextChanged();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                onTextChanged();
            }
            
            private void onTextChanged() {
                validateDisplayName();
                charCountLabel.setText(
                        Integer.toString(nameTextField.getText().length()));
            }
        };
        
        nameTextField.getDocument().addDocumentListener(displayNameListener);
    }

    @Override
    public boolean isFlexible() {
        return false;
    }

    @Override
    public void initializeState() {
        nameTextField.setText(getProperty(StateProperties.DISPLAY_NAME, ""));
        validateDisplayName();
    }

    @Override
    public void registrationApproved() {
        controller.gui_changeState(new MainLobbyState(this));
    }

    @Override
    public void registrationConflict() {
        displayError("Name is unavailable");
    }

    @Override
    public void registrationInvalid() {
        displayError("Name is invalid");
    }

    @Override
    public void syncNotInGame() {
        logDroppedEvent();
    }
    
    @Override
    public void interact(GUIAction action, Object... parameters) {
        switch (action) {
            case CONTINUE:
                interactWith(registerButton);
                break;
            case EXIT:
                interactWith(backButton);
                break;
            case ENTER_TEXT:
                verifyParameters(parameters, String.class);
                nameTextField.setText((String)parameters[0]);
                break;
            case SUBMIT_TEXT:
                interactWith(registerButton);
                break;
            default:
                throw new IllegalStateException(getClass().getName() + " does not support " + action);
        }
    }
}
