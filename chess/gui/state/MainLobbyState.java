/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chess.gui.state;

import chess.game.Alignment;
import chess.gui.GUIAction;
import chess.gui.GUIState;
import chess.gui.IJoinGameListener;
import chess.gui.IStateController;
import chess.gui.StateProperties;
import java.util.function.Predicate;

/**
 *
 * @author yu-chi
 */
public class MainLobbyState extends GUIState implements IJoinGameListener {
    
    boolean joiningSession = false;
    
    /**
     * Creates new form MainLobbyState
     */
    public MainLobbyState(IStateController stateInfo) {
        super(stateInfo);
        initComponents();
        sessionsListPanel.setJoinGameListener(this);
        popupFrame.setShown(false);
    }
    
    public MainLobbyState(IStateController stateInfo, String popupMessage) {
        this(stateInfo);
        popupFrame.setText(popupMessage);
        popupFrame.setShown(true);
    }
    
    private void setDisplayName(String name) {
        if (name == null)
            throw new NullPointerException("no display name value");
        chatEntryField.setDisplayName(name);
    }
    
    private void logChatMessage(String name, String message) {
        chatLog.logMessage(name, message);
    }
    
    private void logGameSession(String name, int players) {
        sessionsListPanel.putSession(name, players);
    }
    
    private void logout() {
        //TODO: Unregister client
        controller.gui_unregisterClient();
        controller.gui_changeState(new RegisterState(this));
    }
    
    private void hostSession() {
        //logGameSession(chatEntryField.getMessage(), 1);
        setProperty(StateProperties.ALIGNMENT_COLOR, Alignment.WHITE);
        controller.gui_hostSession();
    }
    
    private void sendChatMessage() {
        //logChatMessage(getProperty(StateProperties.DISPLAY_NAME), chatEntryField.getMessage());
        controller.gui_sendMessage(chatEntryField.getText());
        chatEntryField.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        lobbyLayerPanel = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        sessionsListPanel = new org.netbeans.modules.form.InvalidComponent();
        chatLog = new org.netbeans.modules.form.InvalidComponent();
        logoutButton = new javax.swing.JButton();
        hostButton = new javax.swing.JButton();
        chatEntryField = new org.netbeans.modules.form.InvalidComponent();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        playersListPanel = new org.netbeans.modules.form.InvalidComponent();
        scoreboardListPanel = new org.netbeans.modules.form.InvalidComponent();
        popupLayerPanel = new javax.swing.JPanel();
        popupFrame = new org.netbeans.modules.form.InvalidComponent();

        jLayeredPane1.setLayout(new javax.swing.OverlayLayout(jLayeredPane1));

        jSplitPane1.setDividerLocation(180);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane1.setLeftComponent(sessionsListPanel);

        jSplitPane1.setRightComponent(chatLog);

        logoutButton.setText("Log Out");
        logoutButton.setFocusable(false);
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        hostButton.setText("Host Game");
        hostButton.setFocusable(false);
        hostButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostButtonActionPerformed(evt);
            }
        });

        jTabbedPane1.addTab("Online", playersListPanel);

        jTabbedPane1.addTab("Leaderboard", scoreboardListPanel);

        javax.swing.GroupLayout lobbyLayerPanelLayout = new javax.swing.GroupLayout(lobbyLayerPanel);
        lobbyLayerPanel.setLayout(lobbyLayerPanelLayout);
        lobbyLayerPanelLayout.setHorizontalGroup(
            lobbyLayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lobbyLayerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lobbyLayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chatEntryField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(lobbyLayerPanelLayout.createSequentialGroup()
                        .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(lobbyLayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                            .addComponent(logoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hostButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        lobbyLayerPanelLayout.setVerticalGroup(
            lobbyLayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lobbyLayerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lobbyLayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addGroup(lobbyLayerPanelLayout.createSequentialGroup()
                        .addComponent(hostButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logoutButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chatEntryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLayeredPane1.add(lobbyLayerPanel);

        popupLayerPanel.setOpaque(false);
        popupLayerPanel.setLayout(new java.awt.BorderLayout());

        popupFrame.null;
        popupLayerPanel.add(popupFrame, java.awt.BorderLayout.CENTER);

        jLayeredPane1.setLayer(popupLayerPanel, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane1.add(popupLayerPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        logout();
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void hostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostButtonActionPerformed
        hostSession();
    }//GEN-LAST:event_hostButtonActionPerformed

    private void chatEntryFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chatEntryFieldActionPerformed
        sendChatMessage();
    }//GEN-LAST:event_chatEntryFieldActionPerformed

    private void popupFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupFrameActionPerformed
        
    }//GEN-LAST:event_popupFrameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.netbeans.modules.form.InvalidComponent chatEntryField;
    private org.netbeans.modules.form.InvalidComponent chatLog;
    private javax.swing.JButton hostButton;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel lobbyLayerPanel;
    private javax.swing.JButton logoutButton;
    private org.netbeans.modules.form.InvalidComponent playersListPanel;
    private org.netbeans.modules.form.InvalidComponent popupFrame;
    private javax.swing.JPanel popupLayerPanel;
    private org.netbeans.modules.form.InvalidComponent scoreboardListPanel;
    private org.netbeans.modules.form.InvalidComponent sessionsListPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void onPropertyChanged(String propertyName) {
        switch (propertyName) {
            case StateProperties.PLAYERS_LIST:
                playersListPanel.setItems(getProperty(propertyName));
                break;
            case StateProperties.SCOREBOARD:
                scoreboardListPanel.setItems(getProperty(propertyName));
                break;
        }
    }

    @Override
    public void unloadState() {
        
    }

    @Override
    public boolean isFlexible() {
        return true;
    }

    @Override
    public void displayError(String message) {
        logChatMessage("*ERROR*", message);
    }

    @Override
    public void clearError(String replaceMessage) {
        
    }

    @Override
    public void initializeState() {
        setDisplayName(getProperty(StateProperties.DISPLAY_NAME));
        controller.gui_listPlayers();
        setProperty(StateProperties.MY_TURN, false);
    }

    @Override
    public void joinGame(String sessionName) {
        if (!joiningSession) { // TODO: timeout
            joiningSession = true; 
            setProperty(StateProperties.SESSION_NAME, sessionName);
            controller.joinGame(sessionName);
        }
    }

    @Override
    public void chatMessage(String sender, String message) {
        logChatMessage(sender, message);
    }

    @Override
    public void pushSession(String sessionName, int playerCount) {
        sessionsListPanel.putSession(sessionName, playerCount);
    }

    @Override
    public void popSession(Predicate<String> sessionNameMatcher) {
        boolean loop;
        do {
            loop = sessionsListPanel.popSession(sessionNameMatcher);
        } while (loop);
    }

    @Override
    public void pushSessions(String[] sessions) {
        for (String s : sessions) {
            String[] fields = s.split(":");
            pushSession(fields[0], Integer.parseInt(fields[1]));
        }
       for (int i = 0; i < sessions.length; ++i)
           sessions[i] = sessions[i].split(":")[0];
        sessionsListPanel.cleanSessions(sessions);
    }

    @Override
    public void enterSession(String error) {
        joiningSession = false;
        if (error == null) {
            GUIState newState = new SessionLobbyState(this);
            String session = getProperty(StateProperties.SESSION_NAME);
            System.out.println("session = " + session);
            setProperty(StateProperties.OPPONENT_NAME, session);
            controller.gui_changeState(newState);
        } else {
            displayError(error);
        }
    }

    @Override
    public void syncNotInGame() {
        logDroppedEvent();
    }

    @Override
    public void interact(GUIAction action, Object... parameters) {
        switch (action) {
            case CONTINUE:
                popupFrame.dismiss();
                break;
            case EXIT:
                interactWith(logoutButton);
                break;
            case ENTER_TEXT:
                verifyParameters(parameters, String.class);
                chatEntryField.setText((String)parameters[0]);
                break;
            case SUBMIT_TEXT:
                chatEntryField.send();
                break;
            case SELECT:
                verifyParameters(parameters, String.class);
                sessionsListPanel.getSession((String)parameters[0]).join();
                break;
            case CREATE:
                interactWith(hostButton);
                break;
            default:
                throw new IllegalStateException(getClass().getName() + " does not support " + action);
        }
    }
    
}
