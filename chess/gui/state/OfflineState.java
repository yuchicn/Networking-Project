/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chess.gui.state;

import chess.Client;
import chess.Server;
import chess.gui.GUIAction;
import chess.gui.GUIState;
import chess.gui.GameProperties;
import chess.gui.IStateController;
import chess.gui.StateProperties;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author yu-chi
 */
public class OfflineState extends GUIState {

    /**
     * Creates new form OfflineState
     */
    public OfflineState(IStateController stateInfo, String reason) {
        super(stateInfo);
        initComponents();
        reasonLabel.setText(reason);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        retryButton = new javax.swing.JButton();
        reasonLabel = new javax.swing.JLabel();
        hostButton = new javax.swing.JButton();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Game server not found");

        retryButton.setText("Retry");
        retryButton.setFocusable(false);
        retryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retryButtonActionPerformed(evt);
            }
        });

        reasonLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        reasonLabel.setText(" ");

        hostButton.setText("Host a server");
        hostButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                    .addComponent(retryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reasonLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hostButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reasonLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(retryButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hostButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void retryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retryButtonActionPerformed
        retryButton.setEnabled(false);
        controller.gui_reconnect();
        retryButton.setEnabled(true);
        controller.gui_registerClient(getProperty(StateProperties.DISPLAY_NAME));
    }//GEN-LAST:event_retryButtonActionPerformed

    private void hostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostButtonActionPerformed
        try {
            System.out.println("Creating a server");
            new Thread(() -> {
                new Server().start(GameProperties.serverPort(), 10);
            }).start();
            try {
                Thread.sleep(4000);
            } catch (InterruptedException ex) {
                Logger.getLogger(OfflineState.class.getName()).log(Level.SEVERE, null, ex);
            }
            controller.gui_reconnect();
            controller.gui_registerClient(getProperty(StateProperties.DISPLAY_NAME));
        } catch (Exception e) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_hostButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton hostButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel reasonLabel;
    private javax.swing.JButton retryButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void initializeState() {
        
    }

    @Override
    protected void onPropertyChanged(String propertyName) {
        
    }

    @Override
    public void unloadState() {
        
    }

    @Override
    public boolean isFlexible() {
        return false;
    }

    @Override
    public void interact(GUIAction action, Object... parameters) {
        switch (action) {
            case CONTINUE:
                interactWith(retryButton);
                break;
            default:
                throw new IllegalStateException(getClass().getName() + " does not support " + action);
        }
    }

    @Override
    public void registrationApproved() {
        controller.gui_changeState(new MainLobbyState(this));
    }

    @Override
    public void registrationConflict() {
        controller.gui_changeState(new RegisterState(this));
    }

    @Override
    public void registrationInvalid() {
        controller.gui_changeState(new RegisterState(this));
    }
    
    
}
