/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chess.gui.state;

import chess.game.Alignment;
import chess.game.ChessPieceType;
import chess.game.Coordinate;
import chess.gui.GUIState;
import chess.gui.IChessBoardListener;
import chess.gamelogic.IGameLogic;
import chess.game.MoveResult;
import chess.gamelogic.PossibleMove;
import chess.gui.AgreementState;
import chess.gui.GUIAction;
import chess.gui.IStateController;
import chess.gui.StateProperties;

/**
 *
 * @author yu-chi
 */
public class PlayState extends GUIState {

    IGameLogic gameLogic;
    
    /**
     * Creates new form PlayState
     */
    public PlayState(IStateController stateInfo) {
        super(stateInfo);
        initComponents();
        
        gameLogic = IGameLogic.defaultGameLogic();
        gameLogic.initialize();
        
        chessBoard.addBoardListener(new IChessBoardListener() {
            @Override
            public void move(Coordinate from, Coordinate to) {
                PlayState.this.movePiece(from, to);
            }

            @Override
            public ChessPieceType getPiece(Coordinate at) {
                return gameLogic.getPiece(at);
            }

            @Override
            public PossibleMove[] getMoves(Coordinate from) {
                return gameLogic.getPossibleMoves(from);
            }
        });
    }
    
    private void movePiece(Coordinate from, Coordinate to) {
        MoveResult valid = gameLogic.canMovePiece(getProperty(StateProperties.ALIGNMENT_COLOR), from, to);
                if (valid.isValid) {
                    controller.gui_move(from, to);
                    if (valid == MoveResult.CHECK_OPPONENT)
                        chatMessage(getProperty(StateProperties.DISPLAY_NAME), "Check");
                } else {
                    switch (valid) {
                        case CHECK_SELF: displayError("You may not place your own king in check."); break;
                        case EMEMY_UNIT: displayError("You may not move that unit."); break;
                        default: displayError("Invalid movement"); break;
                    }
                }
                System.out.println(String.format("move from %s to %s", from, to));
    }
    
    private void requestDrawAction() {
        // (This is a separate method only because Netbeans could delete the 
        // automatically generated button event, which would erase this code)
        
        boolean action = drawButton.isSelected(); // true if we are drawing/accepting
        boolean opponent = getProperty(StateProperties.OPPONENT_IS_DRAWING);// true if opponent has requested a draw
        controller.gui_draw(AgreementState.when(action, opponent));
        drawStateUpdated(action, opponent);
    }
    
    private void drawStateUpdated(boolean iAmDrawing, boolean theyAreDrawing) {
        drawButton.setSelected(iAmDrawing);
        opponentDrawStatusCheckBox.setSelected(theyAreDrawing);
        opponentDrawStatusCheckBox.setToolTipText(
                String.format("Opponent %s requested a draw",
                    theyAreDrawing ? "has" : "has not"));
        if (iAmDrawing && theyAreDrawing)
            controller.gui_changeState(new MainLobbyState(this, "The game has ended in a draw."));
    }
    
    private void updateTurnLabel(boolean myTurn) {
        String turn = (
                myTurn ? 
                "It is your turn" : 
                ("It is " + getProperty(StateProperties.OPPONENT_NAME) + "'s turn.") );
        turnLabel.setText(turn);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rightPanel = new javax.swing.JPanel();
        moveHistoryLabel = new javax.swing.JLabel();
        moveHistoryPanel = new org.netbeans.modules.form.InvalidComponent();
        forfeitButton = new javax.swing.JButton();
        drawButton = new javax.swing.JToggleButton();
        opponentDrawStatusCheckBox = new javax.swing.JCheckBox();
        turnLabel = new javax.swing.JLabel();
        leftPanel = new javax.swing.JPanel();
        chessBoard = new chess.gui.component.ChessBoard(getProperty(StateProperties.ALIGNMENT_COLOR));
        chatLog = new org.netbeans.modules.form.InvalidComponent();
        chatEntryField = new org.netbeans.modules.form.InvalidComponent();

        moveHistoryLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        moveHistoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        moveHistoryLabel.setText("Move History");

        forfeitButton.setText("Forfeit");
        forfeitButton.setFocusable(false);
        forfeitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forfeitButtonActionPerformed(evt);
            }
        });

        drawButton.setText("Request Draw");
        drawButton.setFocusable(false);
        drawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawButtonActionPerformed(evt);
            }
        });

        opponentDrawStatusCheckBox.setToolTipText("Opponent draw status");
        opponentDrawStatusCheckBox.setEnabled(false);

        turnLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        turnLabel.setText("It is your turn.");

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(moveHistoryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(moveHistoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rightPanelLayout.createSequentialGroup()
                        .addComponent(forfeitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(opponentDrawStatusCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(drawButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(turnLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addComponent(moveHistoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(moveHistoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(turnLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(drawButton)
                        .addComponent(opponentDrawStatusCheckBox))
                    .addComponent(forfeitButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chatLog, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                    .addComponent(chessBoard, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(chatEntryField, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chessBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chatLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chatEntryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(leftPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chatEntryFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chatEntryFieldActionPerformed
        controller.gui_sendMessage(chatEntryField.getText());
        chatEntryField.setText("");
    }//GEN-LAST:event_chatEntryFieldActionPerformed

    private void forfeitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forfeitButtonActionPerformed
        controller.gui_forfeit();
        controller.gui_changeState(new MainLobbyState(this));
    }//GEN-LAST:event_forfeitButtonActionPerformed

    private void drawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawButtonActionPerformed
        setProperty(StateProperties.I_AM_DRAWING, drawButton.isSelected());
        requestDrawAction();
        drawButton.setText(drawButton.isSelected() ? "Cancel Draw" : "Request Draw");
    }//GEN-LAST:event_drawButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.netbeans.modules.form.InvalidComponent chatEntryField;
    private org.netbeans.modules.form.InvalidComponent chatLog;
    private org.netbeans.modules.form.InvalidComponent chessBoard;
    private javax.swing.JToggleButton drawButton;
    private javax.swing.JButton forfeitButton;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JLabel moveHistoryLabel;
    private org.netbeans.modules.form.InvalidComponent moveHistoryPanel;
    private javax.swing.JCheckBox opponentDrawStatusCheckBox;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JLabel turnLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void initializeState() {
        String name = getProperty(StateProperties.DISPLAY_NAME);
        chatEntryField.setDisplayName(name);
        setProperty(StateProperties.OPPONENT_IS_DRAWING, false);
        setProperty(StateProperties.I_AM_DRAWING, false);
        updateTurnLabel(getProperty(StateProperties.MY_TURN));
    }

    @Override
    protected void onPropertyChanged(String propertyName) {
        switch (propertyName) {
            case StateProperties.I_AM_DRAWING:
            case StateProperties.OPPONENT_IS_DRAWING:
                boolean iAmDrawing = getProperty(StateProperties.I_AM_DRAWING, false);
                boolean opponentDrawing = getProperty(StateProperties.OPPONENT_IS_DRAWING, false);
                drawStateUpdated(iAmDrawing, opponentDrawing);
                break;
            case StateProperties.MY_TURN:
                boolean myTurn = getProperty(propertyName);
                updateTurnLabel(myTurn);
                chatLog.logMessage("*INFO*", turnLabel.getText(), 2000);
                break;
        }
    }

    @Override
    public void unloadState() {
        
    }

    @Override
    public boolean isFlexible() {
        return true;
    }

    @Override
    public void syncNotInGame() {
        GUIState newState = new MainLobbyState(this);
        controller.gui_changeState(newState);
        controller.gui_listPlayers();
    }

    @Override
    public void displayError(String message) {
        chatLog.logMessage("*ERROR*", message, 2000);
    }

    @Override
    public void clearError(String replaceMessage) {
        
    }

    @Override
    public void chatMessage(String sender, String message) {
        chatLog.logMessage(sender, message);
    }

    @Override
    public void movePiece(String player, Coordinate from, Coordinate to) {
        Alignment playerColor = 
                player.equals(getProperty(StateProperties.DISPLAY_NAME)) ? 
                    (Alignment)getProperty(StateProperties.ALIGNMENT_COLOR) : 
                    ((Alignment)getProperty(StateProperties.ALIGNMENT_COLOR)).other();
        
        MoveResult result = gameLogic.canMovePiece(playerColor, from, to);
        if (result.isValid) {
            ChessPieceType p = gameLogic.getPiece(from);
            moveHistoryPanel.logMove(p, from, to);
            
            if (result.capturesPiece) {
                System.out.println("Captures piece");
                ChessPieceType capturing = gameLogic.getPiece(to);
                moveHistoryPanel.logCapture(capturing, to);
            }
            
            if (result == MoveResult.CHECK_OPPONENT)
                moveHistoryPanel.logCheck(playerColor);
            
            if (result.promotePawn)
                moveHistoryPanel.logPromotion(playerColor, to);
            
            // apply movement
            gameLogic.movePiece(from, to);
            chessBoard.movePiece(from, to);
            chessBoard.invalidate();
            chessBoard.revalidate();
            chessBoard.repaint();
            
            if (playerColor != getProperty(StateProperties.ALIGNMENT_COLOR)) // if this is the opponent's move
                controller.gui_ackMove(player, from, to); // approve the move
        } else {
            if (result == MoveResult.CHECK_SELF)
                displayError("You may not leave your own king in check");
        }
    }

    @Override
    public void opponentLeft() {
        GUIState lobby = new MainLobbyState(this, "Opponent forfeited: You win!");
        controller.gui_changeState(lobby);
    }

    @Override
    public void interact(GUIAction action, Object... parameters) {
        switch (action) {
            case EXIT:
                interactWith(forfeitButton);
                break;
            case ENTER_TEXT:
                verifyParameters(parameters, String.class);
                chatEntryField.setText((String)parameters[0]);
                break;
            case SUBMIT_TEXT:
                chatEntryField.send();
                break;
            case SELECT:
                verifyParameters(parameters, Coordinate.class, Coordinate.class);
                movePiece((Coordinate)parameters[0], (Coordinate)parameters[1]);
                break;
            case TOGGLE:
                drawButton.setSelected(!drawButton.isSelected());
                drawButtonActionPerformed(null);
                break;
            default:
                throw new IllegalStateException(getClass().getName() + " does not support " + action);
        }
    }
    
}
